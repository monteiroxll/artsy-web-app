name: 🚀 Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Run unit tests
      run: |
        python -m pytest tests/test_main.py::TestArtsyWebService -v --tb=short
        
    - name: 🔗 Run integration tests
      run: |
        python -m pytest tests/test_main.py::TestIntegration -v --tb=short
        
    - name: 📊 Generate coverage report
      run: |
        python -m pytest tests/ --cov=main --cov-report=xml --cov-report=term-missing
        
    - name: 📤 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 🔧 Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: 🔍 Run flake8 linting
      run: |
        flake8 main.py tests/ --max-line-length=100 --extend-ignore=E203,W503
        
    - name: 🎨 Check code formatting with black
      run: |
        black --check main.py tests/
        
    - name: 📝 Check import sorting with isort
      run: |
        isort --check-only main.py tests/

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 🔧 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: 🔒 Run safety check
      run: |
        safety check -r requirements.txt
        
    - name: 🛡️ Run bandit security scan
      run: |
        bandit -r main.py -f json -o bandit-report.json || true
        
    - name: 📊 Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  build:
    name: 🏗️ Build Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🚀 Test application startup
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from main import app
        print('✅ Application imports successfully')
        
        # Test basic functionality
        with app.test_client() as client:
            response = client.get('/')
            assert response.status_code == 200
            print('✅ Root endpoint responds correctly')
            
            response = client.get('/api/search')
            assert response.status_code == 400  # Expected for missing query
            print('✅ API endpoint responds correctly')
        print('✅ Application build check passed')
        "

  deploy-check:
    name: 🚀 Deployment Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Run full test suite
      run: |
        python -m pytest tests/ -v
        
    - name: ✅ Deployment readiness check
      run: |
        echo "✅ All tests passed - ready for deployment!"
        echo "📦 Application structure verified"
        echo "🔧 Dependencies validated"
        echo "🧪 Test coverage adequate"
